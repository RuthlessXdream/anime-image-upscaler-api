# 轻量级GPU Dockerfile - 基于Python官方镜像（推荐）
# 使用方法：docker build -f Dockerfile.python-gpu -t anime-upscaler-api .
FROM python:3.10-slim

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Shanghai \
    PORT=3005

# 安装系统依赖（最小化）
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    wget \
    curl \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# 创建工作目录
WORKDIR /app

# 升级pip并设置超时
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# 1. 安装PyTorch GPU版本（使用官方源）
RUN pip install --no-cache-dir --timeout 300 \
    torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# 2. 安装核心依赖（逐个安装，避免冲突）
RUN pip install --no-cache-dir --timeout 300 \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    pydantic==2.5.0 \
    pydantic-settings==2.1.0

RUN pip install --no-cache-dir --timeout 300 \
    python-multipart==0.0.6 \
    aiofiles==23.2.0 \
    python-dotenv>=1.0.0

RUN pip install --no-cache-dir --timeout 300 \
    opencv-python==4.8.1.78 \
    "Pillow>=10.0.0" \
    numpy==1.24.3

RUN pip install --no-cache-dir --timeout 300 \
    psutil==5.9.5 \
    GPUtil==1.4.0

# 3. 安装Real-ESRGAN（使用官方源，避免tb-nightly问题）
RUN pip install --no-cache-dir --timeout 300 --index-url https://pypi.org/simple \
    realesrgan

# 4. 尝试安装basicsr，如果失败则跳过（运行时安装）
RUN pip install --no-cache-dir --timeout 300 --index-url https://pypi.org/simple \
    basicsr>=1.4.2 || echo "basicsr安装失败，将在运行时重试"

# 复制项目文件
COPY . /app/

# 创建必要的目录
RUN mkdir -p /app/uploads /app/outputs /app/Real-ESRGAN/weights

# 设置权限
RUN chmod +x /app/docker-entrypoint.sh

# 创建运行时依赖安装脚本
RUN echo '#!/bin/bash\n\
# 运行时安装缺失的依赖\n\
echo "检查并安装缺失的依赖..."\n\
python -c "import basicsr" 2>/dev/null || {\n\
    echo "安装basicsr..."\n\
    pip install --no-cache-dir basicsr>=1.4.2 --index-url https://pypi.org/simple || {\n\
        echo "使用备用方案安装basicsr..."\n\
        pip install --no-cache-dir basicsr==1.4.2 --no-deps\n\
    }\n\
}\n\
echo "依赖检查完成"' > /app/install_runtime_deps.sh && \
chmod +x /app/install_runtime_deps.sh

# 下载模型文件（如果不存在）
RUN python scripts/install_dependencies.py || echo "模型下载可能失败，将在运行时重试"

# 暴露端口
EXPOSE 3005

# 健康检查
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# 设置启动脚本
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["python", "start_modern.py"] 